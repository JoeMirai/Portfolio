name: CI/CD

on:
  push:
    branches:
      - master
      - feature/**

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:

    # checkout
    - name: Checkout Repository
      uses: actions/checkout@v3

    # docker compose up
    - name: Start Docker Compose
      run: docker compose up -d

    # end to end testing
    - name: Run Tests
      run: bash ./app/e2e.sh
    
    # git tag
    - name: Tagger
      run: |

        #chmod +X ./app/tagger.sh 
        #bash ./app/tagger.sh
        git fetch --tags

        LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        MAJOR=$(git tag | sort -V | tail -n 1 | cut -d '.' -f1)
        MINOR=$(git tag | sort -V | tail -n 1 | cut -d '.' -f2)
        PATCH=$(git tag | sort -V | tail -n 1 | cut -d '.' -f3)

        echo $MAJOR $MINOR $PATCH

        if echo $LATEST_COMMIT_MESSAGE | grep -q "MAJOR"; then
          MAJOR=$((MAJOR+1))
          MINOR=0
          PATCH=0
        elif echo $LATEST_COMMIT_MESSAGE | grep -q "MINOR"; then
          MINOR=$((MINOR+1))
          PATCH=0
        else
          PATCH=$((PATCH+1))
        fi

        NEW_TAG="$MAJOR.$MINOR.$PATCH"
        echo $NEW_TAG
        git tag "$NEW_TAG"
        #echo $NEW_TAG >> $GITHUB_OUTPUT
        #git push origin $NEW_TAG

    - name: test
      run: |
        echo $GITHUB_OUTPUT
        
    # login to dockerhub    
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/master'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # publish to dockerhub    
    - name: publish to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: |
        docker images
        docker tag portfolio-app:latest jack3131/electify:latest
        docker push jack3131/electify:latest

        docker tag portfolio-db:latest jack3131/mysql:latest
        docker push jack3131/mysql:latest


    # report
    - name: failure
      if: failure()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        message="❌ CI for branch $GITHUB_REF_NAME failed 🚨💀
        Run number: $GITHUB_RUN_NUMBER"
        curl -s --data-urlencode "chat_id=$TELEGRAM_CHAT_ID" --data-urlencode "text=$message" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" > /dev/null

    - name: success
      if: success()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        message="✅ CI for branch $GITHUB_REF_NAME succeeded 🚀🤘
        Run number: $GITHUB_RUN_NUMBER"
        curl -s --data-urlencode "chat_id=$TELEGRAM_CHAT_ID" --data-urlencode "text=$message" "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" > /dev/null